from ctypes import Union
from typing import Optional, Sequence, MutableMapping

from aioarango.api import Endpoint
from aioarango.enums import MethodType
from aioarango.errors import ArangoServerError
from aioarango.models import Request, Response
from aioarango.typings import Json, Jsons, Result


class ExplainAQLQuery(Endpoint):
    error_codes = ()
    status_codes = (
        200,
        # If the query is valid, the server will respond with HTTP 200 and
        # return the optimal execution plan in the plan attribute of the response.
        # If option allPlans was set in the request, an array of plans will be returned
        # in the allPlans attribute instead.
        400,
        # The server will respond with HTTP 400 in case of a malformed request,
        # or if the query contains a parse error. The body of the response will
        # contain the error details embedded in a JSON object.
        # Omitting bind variables if the query references any will also result
        # in an HTTP 400 error.
        404,
        # The server will respond with HTTP 404 in case a non-existing collection is
        # accessed in the query.
    )

    async def explain(
        self,
        query: str,
        all_plans: bool = False,
        max_plans: Optional[int] = None,
        opt_rules: Optional[Sequence[str]] = None,
        bind_vars: Optional[MutableMapping[str, str]] = None,
    ) -> Result[Union[Json, Jsons]]:
        """
        Explain an AQL query.

        Parameters
        ----------
        query : str
            Query to explain.
        all_plans : bool, default : False
            If set to `True`, all possible execution plans are
            returned in the result. If set to `False`, only the optimal plan
            is returned.
        max_plans : int, optional
            Total number of plans generated by the optimizer.
        opt_rules : list of str, optional
            List of optimizer rules.
        bind_vars : MutableMapping, optional
            Bind variables for the query.

        Returns
        -------
        Result
            Execution plan, or plans if **all_plans** was set to `True`.

        Raises
        ------
        ValueError
            If the query has invalid value.
        aioarango.errors.ArangoServerError
            If operation fails.
        """
        if not query:
            raise ValueError(f"`query` has invalid value: `{query}`")

        options: Json = {"allPlans": all_plans}
        if max_plans is not None:
            options["maxNumberOfPlans"] = max_plans
        if opt_rules is not None:
            options["optimizer"] = {"rules": opt_rules}

        data: Json = {"query": query, "options": options}
        if bind_vars is not None:
            data["bindVars"] = bind_vars

        request = Request(
            method_type=MethodType.POST,
            endpoint="/_api/explain",
            data=data,
        )

        def response_handler(response: Response) -> Union[Json, Jsons]:
            if not response.is_success:
                raise ArangoServerError(response, request)

            # status_code 200
            if "plan" in response.body:
                return response.body["plan"]
            else:
                return response.body["plans"]

        return await self.execute(request, response_handler)
